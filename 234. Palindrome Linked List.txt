/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
    ListNode* findMid(ListNode* head){
    ListNode* fast = head;
    ListNode* slow = head;
    
    while( fast->next  && fast->next->next   ){
        fast = fast->next->next;
        slow = slow->next;
    }
    return slow;
}
    ListNode* reverse(ListNode* head){
    ListNode* curr = head;
    ListNode* prev = NULL;
    ListNode* next = NULL;
    
    while( curr!=NULL ){
        next = curr->next;
        curr->next = prev;
        prev = curr;
        curr = next;
    }
    return prev;
}
public:

bool isPalindrome(ListNode* head) {
    if( head == NULL || head->next == NULL )
        return true;
    
    ListNode* mid = findMid(head);
    
    mid->next = reverse(mid->next);
    
    ListNode* temp1 = head;
    ListNode* temp2 = mid->next;
    
    while( temp1 != mid->next && temp2!=NULL ){
        if( temp1->val != temp2->val )
            return false;
        
        temp1 = temp1->next;
        temp2 = temp2->next;
    }
    
    mid->next = reverse(mid->next);

    return true;;
}
};